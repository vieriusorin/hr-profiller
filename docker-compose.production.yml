version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.next.production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    ports:
      - "3000:3000"
    environment:
      # Node Configuration
      NODE_ENV: production
      NODE_OPTIONS: --max-old-space-size=512
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
      HOSTNAME: 0.0.0.0
      # Authentication
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      # API Configuration
      API_URL: http://backend:3001
      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN}
      # Cloud Provider
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
      AZURE_TENANT_ID: ${AZURE_TENANT_ID}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET}
      # File Storage
      AZURE_STORAGE_ACCOUNT_NAME: ${AZURE_STORAGE_ACCOUNT_NAME}
      AZURE_STORAGE_ACCOUNT_KEY: ${AZURE_STORAGE_ACCOUNT_KEY}
      AZURE_STORAGE_CONTAINER_NAME: ${AZURE_STORAGE_CONTAINER_NAME}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: .
      dockerfile: Dockerfile.express.production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    ports:
      - "3001:3001"
    environment:
      # Node Configuration
      NODE_ENV: production
      NODE_OPTIONS: --max-old-space-size=512
      PORT: 3001
      HOST: 0.0.0.0
      # Database & Cache
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_DB: ${POSTGRES_DB:-profiller}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Authentication & Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      # Cloud Provider
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
      AZURE_TENANT_ID: ${AZURE_TENANT_ID}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET}
      AZURE_KEY_VAULT_URL: ${AZURE_KEY_VAULT_URL}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MCP Server service
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp.production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    ports:
      - "3002:3002"
    environment:
      # Node Configuration
      NODE_ENV: production
      NODE_OPTIONS: --max-old-space-size=512
      PORT: 3002
      HOST: 0.0.0.0
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Authentication
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # API Configuration
      API_URL: http://backend:3001
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      backend:
        condition: service_healthy

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-profiller}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  app-network:
    driver: bridge
    name: profiller-network

volumes:
  postgres-data:
    name: profiller-postgres-data 