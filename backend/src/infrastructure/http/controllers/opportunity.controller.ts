import { injectable, inject } from 'inversify';
import { Request, Response } from 'express';
import { TYPES } from '../../../shared/types';
import { OpportunityService } from '../../../domain/opportunity/services/opportunity.service';
import { OpportunityPresenter } from '../../../interfaces/presenters/opportunity.presenter';

@injectable()
export class OpportunityController {
  private readonly presenter = new OpportunityPresenter();

  constructor(
    @inject(TYPES.OpportunityService) 
    private readonly opportunityService: OpportunityService
  ) {}

  async getAll(req: Request, res: Response): Promise<void> {
    try {
      const opportunities = await this.opportunityService.getAllOpportunities();
      
      // Use the enhanced presenter with full query support (pagination, filtering, search, sort)
      const response = this.presenter.successPaginated(opportunities, req);
      
      res.status(200).json(response);
    } catch (error: any) {
      console.error('Error fetching opportunities:', error);
      const errorResponse = this.presenter.error(error);
      res.status(500).json(errorResponse);
    }
  }

  async getById(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const opportunity = await this.opportunityService.getOpportunityById(id);
      
      if (!opportunity) {
        const errorResponse = this.presenter.error({ message: 'Opportunity not found', code: 'NOT_FOUND' });
        res.status(404).json(errorResponse);
        return;
      }

      const response = this.presenter.success(opportunity);
      res.status(200).json(response);
    } catch (error: any) {
      console.error('Error fetching opportunity:', error);
      const errorResponse = this.presenter.error(error);
      res.status(500).json(errorResponse);
    }
  }

  async create(req: Request, res: Response): Promise<void> {
    try {
      // Note: ID is NOT included in the request body - it will be auto-generated by the database
      const opportunityData = req.body;

      // Validate required fields
      if (!opportunityData.opportunityName) {
        const errorResponse = this.presenter.error({ 
          message: 'opportunityName is required', 
          code: 'VALIDATION_ERROR' 
        });
        res.status(400).json(errorResponse);
        return;
      }

      // Convert date strings to Date objects if provided
      if (opportunityData.expectedStartDate) {
        opportunityData.expectedStartDate = new Date(opportunityData.expectedStartDate);
      }
      if (opportunityData.expectedEndDate) {
        opportunityData.expectedEndDate = new Date(opportunityData.expectedEndDate);
      }

      const opportunity = await this.opportunityService.createOpportunity(opportunityData);
      const response = this.presenter.success(opportunity);
      res.status(201).json(response);
    } catch (error: any) {
      console.error('Error creating opportunity:', error);
      const errorResponse = this.presenter.error(error);
      res.status(500).json(errorResponse);
    }
  }

  async update(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const updateData = req.body;

      // Convert date strings to Date objects if provided
      if (updateData.expectedStartDate) {
        updateData.expectedStartDate = new Date(updateData.expectedStartDate);
      }
      if (updateData.expectedEndDate) {
        updateData.expectedEndDate = new Date(updateData.expectedEndDate);
      }

      const opportunity = await this.opportunityService.updateOpportunity(id, updateData);
      const response = this.presenter.success(opportunity);
      res.status(200).json(response);
    } catch (error: any) {
      console.error('Error updating opportunity:', error);
      const statusCode = error.message.includes('not found') ? 404 : 500;
      const errorResponse = this.presenter.error(error);
      res.status(statusCode).json(errorResponse);
    }
  }

  async delete(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      await this.opportunityService.deleteOpportunity(id);

      res.status(204).send();
    } catch (error: any) {
      console.error('Error deleting opportunity:', error);
      const statusCode = error.message.includes('not found') ? 404 : 500;
      const errorResponse = this.presenter.error(error);
      res.status(statusCode).json(errorResponse);
    }
  }
} 