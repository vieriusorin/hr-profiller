import { Router } from 'express';
import { OpportunityController } from '../controllers/opportunity.controller';
import { container } from '../../container';

const router = Router();
const opportunityController = container.resolve(OpportunityController);

/**
 * @swagger
 * /api/v1/opportunities:
 *   get:
 *     summary: Get all opportunities
 *     description: Retrieve all opportunities from the database
 *     tags: [Opportunities]
 *     responses:
 *       200:
 *         description: Successfully retrieved opportunities
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   enum: [success]
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Opportunity'
 *                 meta:
 *                   type: object
 *                   properties:
 *                     count:
 *                       type: number
 *                     timestamp:
 *                       type: string
 *                       format: date-time
 *   post:
 *     summary: Create a new opportunity
 *     description: Create a new opportunity (ID will be auto-generated by the server)
 *     tags: [Opportunities]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - opportunityName
 *             properties:
 *               opportunityName:
 *                 type: string
 *                 example: "E-Commerce Platform Redesign"
 *               clientId:
 *                 type: string
 *                 format: uuid
 *                 example: "123e4567-e89b-12d3-a456-426614174000"
 *               clientName:
 *                 type: string
 *                 example: "TechCorp Inc."
 *               expectedStartDate:
 *                 type: string
 *                 format: date
 *                 example: "2024-03-15"
 *               expectedEndDate:
 *                 type: string
 *                 format: date
 *                 example: "2024-09-15"
 *               probability:
 *                 type: integer
 *                 minimum: 0
 *                 maximum: 100
 *                 example: 75
 *               status:
 *                 type: string
 *                 enum: [In Progress, On Hold, Done]
 *                 example: "In Progress"
 *               comment:
 *                 type: string
 *                 example: "High priority project"
 *               isActive:
 *                 type: boolean
 *                 example: true
 *     responses:
 *       201:
 *         description: Opportunity created successfully
 *       400:
 *         description: Bad request - missing required fields
 */
router.get('/', (req, res) => opportunityController.getAll(req, res));
router.post('/', (req, res) => opportunityController.create(req, res));

/**
 * @swagger
 * /api/v1/opportunities/{id}:
 *   get:
 *     summary: Get opportunity by ID
 *     description: Retrieve a specific opportunity by its UUID
 *     tags: [Opportunities]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: The opportunity UUID
 *     responses:
 *       200:
 *         description: Successfully retrieved opportunity
 *       404:
 *         description: Opportunity not found
 *   put:
 *     summary: Update opportunity
 *     description: Update an existing opportunity by its UUID
 *     tags: [Opportunities]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: The opportunity UUID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               opportunityName:
 *                 type: string
 *               clientId:
 *                 type: string
 *                 format: uuid
 *               clientName:
 *                 type: string
 *               expectedStartDate:
 *                 type: string
 *                 format: date
 *               expectedEndDate:
 *                 type: string
 *                 format: date
 *               probability:
 *                 type: integer
 *                 minimum: 0
 *                 maximum: 100
 *               status:
 *                 type: string
 *                 enum: [In Progress, On Hold, Done]
 *               comment:
 *                 type: string
 *               isActive:
 *                 type: boolean
 *     responses:
 *       200:
 *         description: Opportunity updated successfully
 *       404:
 *         description: Opportunity not found
 *   delete:
 *     summary: Delete opportunity
 *     description: Delete an opportunity by its UUID
 *     tags: [Opportunities]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: The opportunity UUID
 *     responses:
 *       204:
 *         description: Opportunity deleted successfully
 *       404:
 *         description: Opportunity not found
 */
router.get('/:id', (req, res) => opportunityController.getById(req, res));
router.put('/:id', (req, res) => opportunityController.update(req, res));
router.delete('/:id', (req, res) => opportunityController.delete(req, res));

export default router; 