apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: profiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: profiller-backend:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: PORT_BACKEND
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: HOSTNAME
        - name: NODE_OPTIONS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NODE_OPTIONS
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: JWT_SECRET
        - name: JWT_EXPIRES_IN
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: JWT_EXPIRES_IN
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: CORS_ORIGIN
        - name: ALLOWED_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: ALLOWED_ORIGINS
        - name: AZURE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: AZURE_CLIENT_ID
        - name: AZURE_TENANT_ID
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: AZURE_TENANT_ID
        - name: AZURE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: AZURE_CLIENT_SECRET
        - name: AZURE_KEY_VAULT_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: AZURE_KEY_VAULT_URL
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres-service -p 5432; do echo waiting for postgres; sleep 2; done;'] 