version: "3.8"

services:
  # PostgreSQL 16 Alpine
  postgres:
    image: postgres:16-alpine
    container_name: dd-postgresql
    ports:
      - 5433:5432
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    secrets:
      - postgres_user
      - postgres_password
    command: >
      -c "postgres_user= ${cat /run/secrets/postgres_user}"
      -c "postgres_password= ${cat /run/secrets/postgres_password}"
    networks:
      - dd-network
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "$(cat /run/secrets/postgres_user)",
          "-d",
          "${DB_NAME}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - pgdata:/data/postgres
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  # PG Admin 4 Official
  pgadmin:
    image: dpage/pgadmin4
    container_name: dd-pgadmin
    secrets:
      - pgadmin_email
      - pgadmin_password
    environment:
      PGADMIN_DEFAULT_EMAIL: /run/secrets/pgadmin_email
      PGADMIN_DEFAULT_PASSWORD: /run/secrets/pgadmin_password
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - dd-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: 256M

  # Node.JS Express Server - Custom
  express:
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
    secrets:
      - db_user
      - db_password
    build:
      context: ./
      dockerfile: Dockerfile.express
    image: dd-express:1.0
    container_name: dd-express
    ports:
      - "4040:4040"
    restart: always
    networks:
      - dd-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4040"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          memory: 256M

  # NextJS 15 - Custom
  next:
    build:
      context: ./
      dockerfile: Dockerfile.next
    image: dd-next:1.0
    container_name: dd-next
    ports:
      - "3000:3000"
    restart: always
    networks:
      - dd-network
    depends_on:
      - express
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    resources:
      limits:
        cpus: "0.5"
        memory: 256M
      reservations:
        memory: 128M

volumes:
  pgdata:
  pgadmin_data:

networks:
  dd-network:
    driver: bridge

secrets:
  postgres_user:
    file: ./secrets/postgres_user
  postgres_password:
    file: ./secrets/postgres_password
  pgadmin_email:
    file: ./secrets/pgadmin_email
  pgadmin_password:
    file: ./secrets/pgadmin_password
  db_user:
    file: ./secrets/db_user
  db_password:
    file: ./secrets/db_password
