services:
  # PostgreSQL 16 Alpine with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: dd-postgresql
    ports:
      - 5433:5432
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    networks:
      - dd-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
    volumes:
      - pgdata:/data/postgres

  # PG Admin 4 Official
  pgadmin:
    image: dpage/pgadmin4
    container_name: dd-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - dd-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Node.JS Express Server - Custom
  backend:
    build:
      context: .
      dockerfile: Dockerfile.express
    container_name: dd-express
    ports:
      - "3001:3001"
    environment:
      # Node Configuration
      NODE_ENV: development
      NODE_OPTIONS: --max-old-space-size=512
      PORT: 3001
      HOST: 0.0.0.0
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      # Authentication
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: http://localhost:3000
      # CORS Configuration
      CORS_ORIGIN: http://localhost:3000
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001,http://localhost:3002
      # Logging
      LOG_LEVEL: debug
    restart: always
    networks:
      - dd-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # NextJS Frontend - Custom
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.next
    container_name: dd-next
    ports:
      - "3000:3000"
    environment:
      # Node Configuration
      NODE_ENV: development
      NODE_OPTIONS: --max-old-space-size=512
      PORT: 3000
      HOSTNAME: 0.0.0.0
      NEXT_TELEMETRY_DISABLED: 1
      # API Configuration
      API_URL: http://backend:3001
      # Authentication
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: http://localhost:3000
      # CORS Configuration
      CORS_ORIGIN: http://localhost:3000
    restart: always
    networks:
      - dd-network
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # MCP Server - Custom
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: dd-mcp
    ports:
      - "3002:3002"
    environment:
      # Node Configuration
      NODE_ENV: development
      NODE_OPTIONS: --max-old-space-size=512
      PORT: 3002
      HOST: 0.0.0.0
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Authentication
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: http://localhost:3000
      # CORS Configuration
      CORS_ORIGIN: http://localhost:3000
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001,http://localhost:3002
      # Logging
      LOG_LEVEL: debug
      # API Configuration
      API_URL: http://backend:3001
    restart: always
    networks:
      - dd-network
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./mcp-server:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

volumes:
  pgdata:
  pgadmin_data:

networks:
  dd-network:
    driver: bridge
