/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/employees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a paginated list of employees (Person + Employment data)
         * @description Get all employees combining Person and Employment domain data
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /**
                     * @description Search term to filter employees
                     * @example John
                     */
                    search?: string;
                    /**
                     * @description Filter by position (partial match)
                     * @example Engineer
                     */
                    position?: string;
                    /** @description Filter by employee status */
                    employeeStatus?: "Active" | "On Leave" | "Inactive";
                    /** @description Filter by work status */
                    workStatus?: "On Project" | "On Bench" | "Available";
                    /** @description Filter by location (partial match) */
                    location?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of employees with Person and Employment data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "success";
                            data?: components["schemas"]["EmployeeProfile"][];
                            pagination?: components["schemas"]["PaginationMeta"];
                            meta?: {
                                count?: number;
                                filtered?: number;
                                total?: number;
                                /** Format: date-time */
                                timestamp?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new employee
         * @description Create a new employee with comprehensive personal and employment information.
         *
         *     **Request Structure:**
         *     The request body must contain two objects:
         *     - `person` - Personal information (required)
         *     - `employment` - Employment details (required)
         *
         *     **Required Fields:**
         *     - `person.firstName` - Employee's first name
         *     - `person.lastName` - Employee's last name
         *     - `person.email` - Employee's email address (must be unique)
         *     - `employment.position` - Job title/position
         *
         *     **Optional Personal Information:**
         *     - `person.fullName` - Full name (auto-generated if not provided)
         *     - `person.phone` - Phone number
         *     - `person.birthDate` - Date of birth (YYYY-MM-DD format)
         *     - `person.address` - Home address
         *     - `person.city` - City of residence
         *     - `person.country` - Country of residence
         *     - `person.notes` - Personal notes about the employee
         *
         *     **Optional Employment Information:**
         *     - `employment.hireDate` - Date when employee was hired (YYYY-MM-DD format)
         *     - `employment.location` - Work location
         *     - `employment.salary` - Annual salary amount
         *     - `employment.hourlyRate` - Hourly rate (for hourly employees)
         *     - `employment.employmentType` - Type of employment (e.g., "Full-time", "Part-time", "Contract")
         *     - `employment.workStatus` - Work assignment status
         *     - `employment.employeeStatus` - Current status
         *     - `employment.managerId` - UUID of the employee's manager
         *     - `employment.notes` - Employment-related notes
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        person: {
                            /**
                             * @description First name of the employee
                             * @example Jane
                             */
                            firstName: string;
                            /**
                             * @description Last name of the employee
                             * @example Smith
                             */
                            lastName: string;
                            /**
                             * @description Full name (auto-generated if not provided)
                             * @example Jane Smith
                             */
                            fullName?: string;
                            /**
                             * Format: email
                             * @description Email address of the employee
                             * @example jane.smith@company.com
                             */
                            email: string;
                            /**
                             * @description Phone number of the employee
                             * @example +1-555-0123
                             */
                            phone?: string;
                            /**
                             * @description Birth date of the employee (YYYY-MM-DD format)
                             * @example 1990-05-15
                             */
                            birthDate?: string;
                            /**
                             * @description Address of the employee
                             * @example 123 Main St, Anytown, USA
                             */
                            address?: string;
                            /**
                             * @description City where the employee lives
                             * @example San Francisco
                             */
                            city?: string;
                            /**
                             * @description Country where the employee lives
                             * @example USA
                             */
                            country?: string;
                            /**
                             * @description Personal notes about the employee
                             * @example Excellent team player with strong communication skills
                             */
                            notes?: string;
                        };
                        employment: {
                            /**
                             * @description Job position/title
                             * @example Software Engineer
                             */
                            position: string;
                            /**
                             * @description Date when employee was hired (YYYY-MM-DD format)
                             * @example 2024-01-15
                             */
                            hireDate?: string;
                            /**
                             * @description Work location
                             * @example San Francisco Office
                             */
                            location?: string;
                            /**
                             * @description Annual salary
                             * @example 95000
                             */
                            salary?: number;
                            /**
                             * @description Hourly rate (for hourly employees)
                             * @example 45.5
                             */
                            hourlyRate?: number;
                            /**
                             * @description Type of employment
                             * @example Full-time
                             */
                            employmentType?: string;
                            /**
                             * @description Current work assignment status
                             * @example Available
                             */
                            workStatus?: string;
                            /**
                             * @description Current employment status
                             * @example Active
                             */
                            employeeStatus?: string;
                            /**
                             * @description Manager's person ID
                             * @example 789e0123-e89b-12d3-a456-426614174002
                             */
                            managerId?: string;
                            /**
                             * @description Employment-related notes
                             * @example Starting as Software Engineer
                             */
                            notes?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Employee created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "success";
                            data?: components["schemas"]["EmployeeProfile"];
                            meta?: {
                                /** Format: date-time */
                                timestamp?: string;
                            };
                        };
                    };
                };
                /** @description Validation error - missing required fields or invalid data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "error";
                            /** @example Validation failed */
                            message?: string;
                            details?: {
                                /** @example invalid_type */
                                code?: string;
                                /** @example string */
                                expected?: string;
                                /** @example undefined */
                                received?: string;
                                /** @example [
                                 *       "person",
                                 *       "firstName"
                                 *     ] */
                                path?: string[];
                                /** @example Required */
                                message?: string;
                            }[];
                        };
                    };
                };
                /** @description Conflict - email already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "error";
                            /** @example Employee with this email already exists */
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/employees/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get employee by ID (Person + Employment data)
         * @description Retrieve a specific employee's complete profile
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Employee ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Employee profile with Person and Employment data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "success";
                            data?: components["schemas"]["EmployeeProfile"];
                        };
                    };
                };
                /** @description Employee not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete an employee (terminates employment)
         * @description Delete an employee by terminating their employment (maintains data integrity)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Employee terminated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Employee not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update employee information (partial)
         * @description Update employee information with partial data. Only send the fields you want to change.
         *
         *     **Request Structure:**
         *     The request body can contain one or both objects:
         *     - `person` - Personal information updates (optional)
         *     - `employment` - Employment details updates (optional)
         *
         *     At least one of `person` or `employment` must be provided.
         *
         *     **Personal Information Fields (person object):**
         *     - `firstName` - Employee's first name
         *     - `lastName` - Employee's last name
         *     - `fullName` - Employee's full name
         *     - `email` - Employee's email address
         *     - `phone` - Phone number
         *     - `birthDate` - Date of birth (YYYY-MM-DD format)
         *     - `address` - Home address
         *     - `city` - City of residence
         *     - `country` - Country of residence
         *     - `notes` - Personal notes
         *
         *     **Employment Information Fields (employment object):**
         *     - `position` - Job title/position
         *     - `hireDate` - Hire date (YYYY-MM-DD format)
         *     - `location` - Work location
         *     - `salary` - Annual salary
         *     - `hourlyRate` - Hourly rate
         *     - `employmentType` - Type of employment
         *     - `workStatus` - Work status
         *     - `employeeStatus` - Employment status
         *     - `managerId` - Manager's UUID
         *     - `notes` - Employment notes
         *
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Employee ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Personal information updates */
                        person?: {
                            /**
                             * @description First name of the employee
                             * @example Jane
                             */
                            firstName?: string;
                            /**
                             * @description Last name of the employee
                             * @example Smith
                             */
                            lastName?: string;
                            /**
                             * @description Full name of the employee
                             * @example Jane Smith
                             */
                            fullName?: string;
                            /**
                             * Format: email
                             * @description Email address of the employee
                             * @example jane.smith@company.com
                             */
                            email?: string;
                            /**
                             * @description Phone number of the employee
                             * @example +1-555-0123
                             */
                            phone?: string;
                            /**
                             * @description Birth date (YYYY-MM-DD format)
                             * @example 1990-05-15
                             */
                            birthDate?: string;
                            /**
                             * @description Home address
                             * @example 123 Main St, Anytown, USA
                             */
                            address?: string;
                            /**
                             * @description City of residence
                             * @example San Francisco
                             */
                            city?: string;
                            /**
                             * @description Country of residence
                             * @example USA
                             */
                            country?: string;
                            /**
                             * @description Personal notes
                             * @example Updated contact information
                             */
                            notes?: string;
                        };
                        /** @description Employment information updates */
                        employment?: {
                            /**
                             * @description Job position/title
                             * @example Senior Software Engineer
                             */
                            position?: string;
                            /**
                             * @description Hire date (YYYY-MM-DD format)
                             * @example 2024-01-15
                             */
                            hireDate?: string;
                            /**
                             * @description Work location
                             * @example Remote
                             */
                            location?: string;
                            /**
                             * @description Annual salary
                             * @example 110000
                             */
                            salary?: number;
                            /**
                             * @description Hourly rate
                             * @example 50
                             */
                            hourlyRate?: number;
                            /**
                             * @description Type of employment
                             * @example Full-time
                             */
                            employmentType?: string;
                            /**
                             * @description Work assignment status
                             * @example On Project
                             */
                            workStatus?: string;
                            /**
                             * @description Employment status
                             * @example Active
                             */
                            employeeStatus?: string;
                            /**
                             * @description Manager's UUID
                             * @example 789e0123-e89b-12d3-a456-426614174002
                             */
                            managerId?: string;
                            /**
                             * @description Employment notes
                             * @example Promoted to senior level
                             */
                            notes?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Employee updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "success";
                            data?: components["schemas"]["EmployeeProfile"];
                            meta?: {
                                /** Format: date-time */
                                timestamp?: string;
                            };
                        };
                    };
                };
                /** @description Validation error or missing data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "error";
                            /** @example Either person or employment data must be provided */
                            message?: string;
                            details?: {
                                /** @example invalid_type */
                                code?: string;
                                /** @example string */
                                expected?: string;
                                /** @example undefined */
                                received?: string;
                                /** @example [
                                 *       "employment",
                                 *       "position"
                                 *     ] */
                                path?: string[];
                                /** @example Required */
                                message?: string;
                            }[];
                        };
                    };
                };
                /** @description Employee not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/v1/employees/{id}/promote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Promote an employee (Employment domain operation)
         * @description Promote an employee to a new position with optional salary increase
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description New position title */
                        newPosition: string;
                        /** @description New salary (optional) */
                        newSalary?: number;
                    };
                };
            };
            responses: {
                /** @description Employee promoted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Employee not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/employees/{id}/terminate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Terminate an employee (Employment domain operation)
         * @description Terminate an employee's employment
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * Format: date
                         * @description Termination date (optional, defaults to today)
                         */
                        endDate?: string;
                        /** @description Termination notes (optional) */
                        notes?: string;
                    };
                };
            };
            responses: {
                /** @description Employee terminated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Employee not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/employees/{id}/assign-manager": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign a manager to an employee (Employment domain operation)
         * @description Assign a manager to an employee
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description ID of the manager to assign
                         */
                        managerId: string;
                    };
                };
            };
            responses: {
                /** @description Manager assigned successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Employee or manager not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/employees/{id}/remove-manager": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove manager from an employee (Employment domain operation)
         * @description Remove the currently assigned manager from an employee
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Manager removed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Employee not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/employees/{id}/searchable-content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get searchable content for RAG applications
         * @description Get formatted searchable content combining Person and Employment data for RAG applications
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Searchable content generated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "success";
                            data?: {
                                /** Format: uuid */
                                employeeId?: string;
                                /** @description Formatted searchable content */
                                searchableContent?: string;
                                /** Format: date-time */
                                lastUpdated?: string;
                            };
                        };
                    };
                };
                /** @description Employee not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lookup/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all available skills
         * @description Retrieve a list of all available skills with optional filtering and pagination. Use this endpoint to discover skills that can be added to employees.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Search skills by name (case-insensitive) */
                    search?: string;
                    /** @description Filter skills by category */
                    category?: string;
                    /** @description Number of skills to return (default 50) */
                    limit?: number;
                    /** @description Number of skills to skip (default 0) */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Skills retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "status": "success",
                         *       "data": [
                         *         {
                         *           "id": "550e8400-e29b-41d4-a716-446655440000",
                         *           "name": "JavaScript",
                         *           "category": "Programming Language",
                         *           "description": "High-level programming language for web development",
                         *           "createdAt": "2024-01-01T00:00:00Z",
                         *           "updatedAt": "2024-01-01T00:00:00Z"
                         *         }
                         *       ],
                         *       "pagination": {
                         *         "total": 55,
                         *         "limit": 50,
                         *         "offset": 0,
                         *         "hasMore": false
                         *       }
                         *     } */
                        "application/json": components["schemas"]["SkillsResponse"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lookup/skills/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get skill categories
         * @description Retrieve a list of all available skill categories
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Skill categories retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "status": "success",
                         *       "data": [
                         *         "Programming Language",
                         *         "Frontend Framework",
                         *         "Database",
                         *         "Cloud Platform"
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["CategoriesResponse"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lookup/technologies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all available technologies
         * @description Retrieve a list of all available technologies with optional filtering and pagination. Use this endpoint to discover technologies that can be added to employees.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Search technologies by name (case-insensitive) */
                    search?: string;
                    /** @description Filter technologies by category */
                    category?: string;
                    /** @description Number of technologies to return (default 50) */
                    limit?: number;
                    /** @description Number of technologies to skip (default 0) */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Technologies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "status": "success",
                         *       "data": [
                         *         {
                         *           "id": "550e8400-e29b-41d4-a716-446655440001",
                         *           "name": "React",
                         *           "category": "Frontend Framework",
                         *           "description": "JavaScript library for building user interfaces",
                         *           "version": "18.0",
                         *           "createdAt": "2024-01-01T00:00:00Z",
                         *           "updatedAt": "2024-01-01T00:00:00Z"
                         *         }
                         *       ],
                         *       "pagination": {
                         *         "total": 42,
                         *         "limit": 50,
                         *         "offset": 0,
                         *         "hasMore": false
                         *       }
                         *     } */
                        "application/json": components["schemas"]["TechnologiesResponse"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/lookup/technologies/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get technology categories
         * @description Retrieve a list of all available technology categories
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Technology categories retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "status": "success",
                         *       "data": [
                         *         "Frontend Framework",
                         *         "Backend Framework",
                         *         "Database",
                         *         "Cloud Platform"
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["CategoriesResponse"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/opportunities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get opportunities with pagination, filtering, search, and sorting
         * @description Retrieve opportunities with advanced query capabilities:
         *     - **Pagination**: Control page size and navigate through results
         *     - **Filtering**: Filter by client, probability range, status, active state, dates
         *     - **Search**: Full-text search across opportunity name, client name, and comments
         *     - **Sorting**: Sort by various fields in ascending or descending order
         *
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Page number for pagination
                     * @example 1
                     */
                    page?: number;
                    /**
                     * @description Number of items per page
                     * @example 5
                     */
                    limit?: number;
                    /**
                     * @description Search term to find in opportunity name, client name, or comments
                     * @example Platform
                     */
                    search?: string;
                    /**
                     * @description Specific fields to search in (comma-separated). Allowed values: `opportunityName`, `clientName`, `comment`
                     * @example opportunityName,clientName
                     */
                    searchFields?: string;
                    /**
                     * @description Filter by client name (partial match, case-insensitive)
                     * @example Herzog
                     */
                    client?: string;
                    /**
                     * @description Probability range filter (format: min-max)
                     * @example 80-100
                     */
                    probability?: string;
                    /**
                     * @description Filter by opportunity status
                     * @example Done
                     */
                    status?: "In Progress" | "On Hold" | "Done";
                    /**
                     * @description Filter by active status
                     * @example true
                     */
                    isActive?: boolean;
                    /**
                     * @description Filter opportunities starting from this date
                     * @example 2025-01-01
                     */
                    startDate?: string;
                    /**
                     * @description Filter opportunities ending before this date
                     * @example 2025-12-31
                     */
                    endDate?: string;
                    /**
                     * @description Field to sort by
                     * @example probability
                     */
                    sortBy?: "opportunityName" | "clientName" | "probability" | "createdAt" | "updatedAt" | "status";
                    /**
                     * @description Sort order
                     * @example desc
                     */
                    sortOrder?: "asc" | "desc";
                    /** @description Legacy page parameter (use 'page' instead) */
                    _page?: number;
                    /** @description Legacy limit parameter (use 'limit' instead) */
                    _limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved opportunities with enhanced metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @example success
                             * @enum {string}
                             */
                            status?: "success";
                            data?: components["schemas"]["Opportunity"][];
                            pagination?: components["schemas"]["PaginationMeta"];
                            filters?: components["schemas"]["FilterParams"];
                            search?: components["schemas"]["SearchParams"];
                            sort?: components["schemas"]["SortParams"];
                            meta?: {
                                /**
                                 * @description Number of items in current page
                                 * @example 5
                                 */
                                count?: number;
                                /**
                                 * @description Total items after filtering
                                 * @example 25
                                 */
                                filtered?: number;
                                /**
                                 * @description Total items in database
                                 * @example 25
                                 */
                                total?: number;
                                /**
                                 * Format: date-time
                                 * @description Response timestamp
                                 * @example 2025-06-19T11:47:43.584Z
                                 */
                                timestamp?: string;
                                /**
                                 * @description API endpoint that was called
                                 * @example /api/v1/opportunities
                                 */
                                endpoint?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new opportunity
         * @description Create a new opportunity (ID will be auto-generated by the server)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateOpportunity"];
                };
            };
            responses: {
                /** @description Opportunity created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: components["schemas"]["Opportunity"];
                        };
                    };
                };
                /** @description Bad request - missing required fields */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/opportunities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get opportunity by ID
         * @description Retrieve a specific opportunity by its UUID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The opportunity UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved opportunity */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: components["schemas"]["Opportunity"];
                        };
                    };
                };
                /** @description Opportunity not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete opportunity
         * @description Delete an opportunity by its UUID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The opportunity UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Opportunity deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Opportunity not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update opportunity (partial)
         * @description Update an existing opportunity with partial data. Only send the fields you want to change.
         *
         *     **Available Fields to Update:**
         *     - `opportunityName` - Name/title of the opportunity
         *     - `clientName` - Client company name
         *     - `expectedStartDate` - Expected project start date (ISO 8601 format)
         *     - `expectedEndDate` - Expected project end date (ISO 8601 format)
         *     - `probability` - Success probability percentage (0-100)
         *     - `status` - Current opportunity status
         *     - `comment` - Additional notes or comments
         *     - `isActive` - Whether the opportunity is currently active
         *
         *     **Business Logic:**
         *     - If `probability` ≥ 80% and opportunity is inactive, it will be auto-activated
         *     - If `probability` < 80% and opportunity was auto-activated, it may be auto-deactivated
         *
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The opportunity UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateOpportunity"];
                };
            };
            responses: {
                /** @description Opportunity updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"] & {
                            data?: components["schemas"]["Opportunity"];
                        };
                    };
                };
                /** @description Bad request - invalid data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Opportunity not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/persons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a paginated list of persons with filtering, searching, and sorting */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Include related data (skills, technologies, education) in response */
                    includeRelated?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of persons with metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @example success
                             * @enum {string}
                             */
                            status?: "success";
                            data?: components["schemas"]["Person"][];
                            pagination?: components["schemas"]["PaginationMeta"];
                            meta?: {
                                /**
                                 * @description Number of items in current page
                                 * @example 10
                                 */
                                count?: number;
                                /**
                                 * @description Total items after filtering
                                 * @example 25
                                 */
                                filtered?: number;
                                /**
                                 * @description Total items in database
                                 * @example 25
                                 */
                                total?: number;
                                /**
                                 * Format: date-time
                                 * @description Response timestamp
                                 * @example 2024-01-16T15:30:00Z
                                 */
                                timestamp?: string;
                                /**
                                 * @description API endpoint that was called
                                 * @example /api/v1/persons
                                 */
                                endpoint?: string;
                            };
                        };
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /** Create a new person */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreatePerson"];
                };
            };
            responses: {
                /** @description Person created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "success";
                            data?: components["schemas"]["Person"];
                        };
                    };
                };
                400: components["responses"]["ValidationError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/persons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a single person by ID */
        get: {
            parameters: {
                query?: {
                    /** @description Include related data (skills, technologies, education) in response */
                    includeRelated?: boolean;
                };
                header?: never;
                path: {
                    /**
                     * @description The person ID
                     * @example 123e4567-e89b-12d3-a456-426614174000
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A single person with metadata */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @example success
                             * @enum {string}
                             */
                            status?: "success";
                            data?: components["schemas"]["Person"];
                            meta?: {
                                /**
                                 * Format: date-time
                                 * @example 2024-01-16T15:30:00Z
                                 */
                                timestamp?: string;
                            };
                        };
                    };
                };
                /** @description Person not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        /** Delete a person */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Person deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Partially update an existing person
         * @description Update specific fields of a person. Only send the fields you want to change.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePerson"];
                };
            };
            responses: {
                /** @description Person updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "success";
                            data?: components["schemas"]["Person"];
                        };
                    };
                };
                400: components["responses"]["ValidationError"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        trace?: never;
    };
    "/api/v1/persons/{id}/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a skill to a person (auto-creates skill if not exists) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreatePersonSkill"];
                };
            };
            responses: {
                /** @description Skill added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "success";
                            data?: {
                                /** @example Skill added successfully */
                                message?: string;
                            };
                            meta?: {
                                /** Format: date-time */
                                timestamp?: string;
                            };
                        };
                    };
                };
                400: components["responses"]["ValidationError"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/persons/{id}/skills/{skillId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a skill from a person */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                    /** @description The skill ID or skill name */
                    skillId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Skill removed successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        /** Update a person's skill */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                    /** @description The skill ID or skill name */
                    skillId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePersonSkill"];
                };
            };
            responses: {
                /** @description Skill updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["ValidationError"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        trace?: never;
    };
    "/api/v1/persons/{id}/technologies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a technology to a person (auto-creates technology if not exists) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreatePersonTechnology"];
                };
            };
            responses: {
                /** @description Technology added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["ValidationError"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/persons/{id}/technologies/{technologyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a technology from a person */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                    /** @description The technology ID or technology name */
                    technologyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Technology removed successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        /** Update a person's technology */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                    /** @description The technology ID or technology name */
                    technologyId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePersonTechnology"];
                };
            };
            responses: {
                /** @description Technology updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["ValidationError"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        trace?: never;
    };
    "/api/v1/persons/{id}/education": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add education to a person */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreatePersonEducation"];
                };
            };
            responses: {
                /** @description Education added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["ValidationError"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/persons/{id}/education/{educationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove education record from a person */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                    /** @description The education record ID */
                    educationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Education removed successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        /** Update education record */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                    /** @description The education record ID */
                    educationId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdatePersonEducation"];
                };
            };
            responses: {
                /** @description Education updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["ValidationError"];
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        trace?: never;
    };
    "/api/v1/persons/search/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search persons by skills */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description List of skill names to search for
                         * @example [
                         *       "JavaScript",
                         *       "React",
                         *       "Node.js"
                         *     ]
                         */
                        skills: string[];
                    };
                };
            };
            responses: {
                /** @description List of persons matching the skills criteria */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["ValidationError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/persons/search/technologies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search persons by technologies */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description List of technology names to search for
                         * @example [
                         *       "React",
                         *       "PostgreSQL",
                         *       "Docker"
                         *     ]
                         */
                        technologies: string[];
                    };
                };
            };
            responses: {
                /** @description List of persons matching the technologies criteria */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["ValidationError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/persons/search/education": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search persons by education */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Institution name (partial match)
                         * @example Stanford
                         */
                        institution?: string;
                        /**
                         * @description Degree type (partial match)
                         * @example Bachelor
                         */
                        degree?: string;
                        /**
                         * @description Field of study (partial match)
                         * @example Computer Science
                         */
                        fieldOfStudy?: string;
                    };
                };
            };
            responses: {
                /** @description List of persons matching the education criteria */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["ValidationError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/persons/{id}/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get person's capabilities summary */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The person ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Person's capabilities summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "success";
                            data?: {
                                /**
                                 * Format: uuid
                                 * @description Person ID
                                 */
                                personId?: string;
                                /** @description Comprehensive capabilities summary */
                                capabilities?: Record<string, never>;
                            };
                            meta?: {
                                /** Format: date-time */
                                timestamp?: string;
                            };
                        };
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/opportunity/{opportunityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all roles for an opportunity */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description UUID of the opportunity */
                    opportunityId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of roles for the opportunity */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: components["schemas"]["Role"][];
                        };
                    };
                };
                /** @description Opportunity not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a role by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Role details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: components["schemas"]["Role"];
                        };
                    };
                };
                /** @description Role not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a role */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Role deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Role not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update a role (partial)
         * @description Update an existing role with partial data. Only send the fields you want to change.
         *
         *     **Available Fields to Update:**
         *     - `roleName` - Name/title of the role
         *     - `jobGrade` - Job grade/seniority level (see enum values)
         *     - `level` - Opportunity priority level (see enum values)
         *     - `allocation` - Percentage of time allocated (0-100%)
         *     - `startDate/endDate` - Role duration (YYYY-MM-DD format)
         *     - `status` - Current role status (see enum values)
         *     - `notes` - Additional information about the role
         *
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateRole"];
                };
            };
            responses: {
                /** @description Role updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: components["schemas"]["Role"];
                        };
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Role not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new role for an opportunity
         * @description Create a new role within an existing opportunity. Roles define specific positions needed to fulfill the opportunity requirements.
         *
         *     **Required Fields:**
         *     - `opportunityId` - UUID of the existing opportunity
         *     - `roleName` - Descriptive name for the role (e.g., "Senior Frontend Developer", "Project Manager")
         *     - `status` - Current status of the role
         *
         *     **Field Details:**
         *     - **opportunityId**: Must be a valid UUID of an existing opportunity
         *     - **roleName**: Descriptive role title (1-255 characters)
         *     - **jobGrade**: Employee seniority level (see enum values below)
         *     - **level**: Opportunity priority level (see enum values below)
         *     - **allocation**: Percentage of time allocated to this role (0-100)
         *     - **startDate/endDate**: Role duration (YYYY-MM-DD format)
         *     - **status**: Current role status (see enum values below)
         *     - **notes**: Additional information about the role
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateRole"];
                };
            };
            responses: {
                /** @description Role created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            data?: components["schemas"]["Role"];
                        };
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{id}/assign-member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign a person to a role
         * @description Assign a person (employee or candidate) to a specific role
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description UUID of the person to assign
                         */
                        personId: string;
                    };
                };
            };
            responses: {
                /** @description Member assigned successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            /** @example Member assigned successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{id}/unassign-member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unassign a person from a role
         * @description Remove a person assignment from a specific role
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description UUID of the person to unassign
                         */
                        personId: string;
                    };
                };
            };
            responses: {
                /** @description Member unassigned successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            /** @example Member unassigned successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{id}/assigned-members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update the full list of assigned members for a role
         * @description Replace all current assignments with a new list of person IDs
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role UUID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Array of person UUIDs to assign to this role */
                        personIds: string[];
                    };
                };
            };
            responses: {
                /** @description Assigned members updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example success */
                            status?: string;
                            /** @example Assigned members updated successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Employee: {
            /**
             * Format: uuid
             * @description Unique identifier for the employee (used for CRUD operations)
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * Format: uuid
             * @description Unique identifier for the person record
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            personId: string;
            /**
             * @description First name of the employee
             * @example John
             */
            firstName: string;
            /**
             * @description Last name of the employee
             * @example Doe
             */
            lastName: string;
            /**
             * @description Full name of the employee
             * @example John Doe
             */
            fullName: string;
            /**
             * Format: email
             * @description Email address of the employee
             * @example john.doe@company.com
             */
            email: string;
            /**
             * @description Phone number of the employee
             * @example +1-555-0123
             */
            phone?: string | null;
            /**
             * Format: date-time
             * @description Birth date of the employee
             * @example 1990-05-15T00:00:00Z
             */
            birthDate?: string | null;
            /**
             * @description Address of the employee
             * @example 123 Main St, Anytown, USA
             */
            address?: string | null;
            /**
             * @description City where the employee lives
             * @example New York
             */
            city?: string | null;
            /**
             * @description Country where the employee lives
             * @example USA
             */
            country?: string | null;
            /**
             * @description Personal notes about the employee
             * @example Prefers remote work
             */
            personNotes?: string | null;
            /**
             * Format: date-time
             * @description When the person record was created
             * @example 2024-01-10T09:00:00Z
             */
            personCreatedAt: string;
            /**
             * Format: uuid
             * @description Unique identifier for employment details
             * @example 456e7890-e89b-12d3-a456-426614174001
             */
            employmentDetailsId?: string | null;
            /**
             * @description Employee ID (company-specific)
             * @example EMP001
             */
            employeeId?: string | null;
            /**
             * Format: date-time
             * @description Date when the employee was hired
             * @example 2024-01-15T00:00:00Z
             */
            hireDate?: string | null;
            /**
             * Format: date-time
             * @description Date when the employee was terminated (if applicable)
             * @example null
             */
            terminationDate?: string | null;
            /**
             * @description Job position/title
             * @example Senior Software Engineer
             */
            position?: string | null;
            /**
             * @description Type of employment
             * @example Full-time
             */
            employmentType?: string | null;
            /**
             * @description Annual salary
             * @example 75000
             */
            salary?: number | null;
            /**
             * @description Hourly rate (for hourly employees)
             * @example 45.5
             */
            hourlyRate?: number | null;
            /**
             * Format: uuid
             * @description Manager's person ID
             * @example 789e0123-e89b-12d3-a456-426614174002
             */
            managerId?: string | null;
            /**
             * @description Current employment status
             * @example Active
             * @enum {string|null}
             */
            employeeStatus?: "Active" | "On Leave" | "Inactive" | null;
            /**
             * @description Current work assignment status
             * @example On Project
             * @enum {string|null}
             */
            workStatus?: "On Project" | "On Bench" | "Available" | null;
            /**
             * @description Job grade level
             * @example SE
             * @enum {string|null}
             */
            jobGrade?: "JT" | "T" | "ST" | "EN" | "SE" | "C" | "SC" | "SM" | null;
            /**
             * @description Work location
             * @example New York Office
             */
            location?: string | null;
            /**
             * @description Emergency contact name
             * @example Jane Doe
             */
            emergencyContactName?: string | null;
            /**
             * @description Emergency contact phone
             * @example +1-555-0456
             */
            emergencyContactPhone?: string | null;
            /**
             * @description Employment-related notes
             * @example Promoted to senior level in 2023
             */
            employmentNotes?: string | null;
            /**
             * Format: date-time
             * @description When employment record was created
             * @example 2022-01-15T10:00:00Z
             */
            employmentCreatedAt?: string | null;
            /**
             * Format: date-time
             * @description When employment record was last updated
             * @example 2024-01-15T14:30:00Z
             */
            employmentUpdatedAt?: string | null;
            /**
             * @description Years of experience since hire date
             * @example 2
             */
            yearsOfExperience?: number;
            /**
             * @description Whether the employee is inactive
             * @example false
             */
            isInactive: boolean;
            /**
             * @description Whether the employee is on bench
             * @example false
             */
            isOnBench: boolean;
            /**
             * @description Employee skills (included by default, excluded when includeRelated=false)
             * @example [
             *       {
             *         "skillId": "550e8400-e29b-41d4-a716-446655440000",
             *         "skillName": "JavaScript",
             *         "skillCategory": "Programming Language",
             *         "skillDescription": "High-level programming language",
             *         "proficiencyLevel": "ADVANCED",
             *         "yearsOfExperience": "5",
             *         "lastUsed": "2024-01-15T00:00:00Z",
             *         "isCertified": true,
             *         "certificationName": "JavaScript Professional Certificate",
             *         "certificationDate": "2023-06-15T00:00:00Z",
             *         "notes": "Extensive experience with React and Node.js",
             *         "createdAt": "2024-01-01T00:00:00Z",
             *         "updatedAt": "2024-01-15T00:00:00Z"
             *       }
             *     ]
             */
            skills?: components["schemas"]["EmployeeSkill"][];
            /**
             * @description Employee technologies (included by default, excluded when includeRelated=false)
             * @example [
             *       {
             *         "technologyId": "550e8400-e29b-41d4-a716-446655440001",
             *         "technologyName": "React",
             *         "technologyCategory": "Frontend Framework",
             *         "technologyDescription": "JavaScript library for building user interfaces",
             *         "proficiencyLevel": "ADVANCED",
             *         "yearsOfExperience": "4",
             *         "lastUsed": "2024-01-10T00:00:00Z",
             *         "context": "Frontend Development",
             *         "projectName": "E-commerce Platform",
             *         "description": "Built scalable React components for user interfaces",
             *         "createdAt": "2024-01-01T00:00:00Z",
             *         "updatedAt": "2024-01-10T00:00:00Z"
             *       }
             *     ]
             */
            technologies?: components["schemas"]["EmployeeTechnology"][];
            /**
             * @description Employee education (included by default, excluded when includeRelated=false)
             * @example [
             *       {
             *         "educationId": "550e8400-e29b-41d4-a716-446655440002",
             *         "institution": "Stanford University",
             *         "degree": "Bachelor of Science",
             *         "fieldOfStudy": "Computer Science",
             *         "startDate": "2018-09-01T00:00:00Z",
             *         "graduationDate": "2022-06-15T00:00:00Z",
             *         "description": "Focused on software engineering and algorithms",
             *         "gpa": "3.8",
             *         "isCurrentlyEnrolled": "false",
             *         "createdAt": "2024-01-01T00:00:00Z",
             *         "updatedAt": "2024-01-01T00:00:00Z"
             *       }
             *     ]
             */
            education?: components["schemas"]["EmployeeEducation"][];
        };
        Opportunity: {
            /**
             * Format: uuid
             * @description Unique identifier (UUID) for the opportunity
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Name of the opportunity
             * @example E-Commerce Platform Redesign
             */
            opportunityName: string;
            /**
             * Format: uuid
             * @description Client UUID reference
             * @example 456e7890-e89b-12d3-a456-426614174001
             */
            clientId?: string | null;
            /**
             * @description Client company name
             * @example TechCorp Inc.
             */
            clientName?: string | null;
            /**
             * Format: date
             * @description Expected project start date
             * @example 2024-03-15
             */
            expectedStartDate?: string | null;
            /**
             * Format: date
             * @description Expected project end date
             * @example 2024-09-15
             */
            expectedEndDate?: string | null;
            /**
             * @description Success probability percentage
             * @example 75
             */
            probability?: number | null;
            /**
             * @description Current status of the opportunity
             * @example In Progress
             * @enum {string}
             */
            status: "In Progress" | "On Hold" | "Done";
            /**
             * @description Additional comments or notes
             * @example High priority client project
             */
            comment?: string | null;
            /**
             * @description Whether the opportunity is currently active
             * @example true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description When the opportunity was activated
             * @example 2024-01-15T10:30:00Z
             */
            activatedAt?: string | null;
            /**
             * Format: date-time
             * @description When the opportunity was created
             * @example 2024-01-10T09:00:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the opportunity was last updated
             * @example 2024-01-16T14:20:00Z
             */
            updatedAt: string;
            /**
             * @description Whether the opportunity has high probability (>= 80%) - computed from business logic
             * @example true
             */
            isHighProbability: boolean;
            /**
             * @description Project duration in days - computed from start/end dates
             * @example 180
             */
            duration: number | null;
            /**
             * @description Whether the opportunity is expiring within 30 days - computed from end date
             * @example false
             */
            isExpiringSoon: boolean;
            /**
             * @description Array of roles associated with this opportunity
             * @example [
             *       {
             *         "id": "789e0123-e89b-12d3-a456-426614174003",
             *         "opportunityId": "123e4567-e89b-12d3-a456-426614174000",
             *         "roleName": "Senior Frontend Developer",
             *         "jobGrade": "SE",
             *         "level": "High",
             *         "allocation": 80,
             *         "status": "Open",
             *         "notes": "React experience required",
             *         "createdAt": "2024-01-10T09:00:00Z",
             *         "updatedAt": "2024-01-16T14:20:00Z"
             *       }
             *     ]
             */
            roles: components["schemas"]["Role"][];
        };
        /** @description Schema for creating a new opportunity */
        CreateOpportunity: {
            /**
             * @description Name/title of the opportunity
             * @example E-commerce Platform Development
             */
            opportunityName: string;
            /**
             * @description Name of the client company
             * @example TechCorp Inc.
             */
            clientName: string;
            /**
             * Format: date-time
             * @description Expected project start date (ISO 8601 format)
             * @example 2024-04-01T00:00:00Z
             */
            expectedStartDate?: string | null;
            /**
             * Format: date-time
             * @description Expected project end date (ISO 8601 format)
             * @example 2024-10-31T00:00:00Z
             */
            expectedEndDate?: string | null;
            /**
             * @description Success probability percentage (0-100)
             * @example 75
             */
            probability?: number | null;
            /**
             * @description Current status of the opportunity
             * @example In Progress
             * @enum {string}
             */
            status: "In Progress" | "On Hold" | "Done";
            /**
             * @description Additional comments or notes about the opportunity
             * @example High-priority client with potential for long-term partnership
             */
            comment?: string | null;
        };
        /** @description Schema for updating opportunity information via PATCH request. All fields are optional. */
        UpdateOpportunity: {
            /**
             * @description Name/title of the opportunity
             * @example E-commerce Platform Development
             */
            opportunityName?: string;
            /**
             * @description Name of the client company
             * @example TechCorp Inc.
             */
            clientName?: string;
            /**
             * Format: date-time
             * @description Expected project start date (ISO 8601 format)
             * @example 2024-04-01T00:00:00Z
             */
            expectedStartDate?: string | null;
            /**
             * Format: date-time
             * @description Expected project end date (ISO 8601 format)
             * @example 2024-10-31T00:00:00Z
             */
            expectedEndDate?: string | null;
            /**
             * @description Success probability percentage (0-100)
             * @example 75
             */
            probability?: number | null;
            /**
             * @description Current status of the opportunity
             * @example In Progress
             * @enum {string}
             */
            status?: "In Progress" | "On Hold" | "Done";
            /**
             * @description Additional comments or notes about the opportunity
             * @example Updated timeline due to client requirements change
             */
            comment?: string | null;
        };
        Role: {
            /**
             * Format: uuid
             * @description Unique identifier (UUID) for the role
             * @example 789e0123-e89b-12d3-a456-426614174003
             */
            id: string;
            /**
             * Format: uuid
             * @description Reference to the opportunity UUID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            opportunityId: string;
            /**
             * @description Name of the role
             * @example Senior Frontend Developer
             */
            roleName: string;
            /** @description Job grade for the role */
            jobGrade?: components["schemas"]["JobGrade"];
            /** @description Priority/importance level of the role */
            level?: components["schemas"]["OpportunityLevel"];
            /**
             * @description Allocation percentage (0-100)
             * @example 100
             */
            allocation?: number;
            /**
             * Format: date-time
             * @description Role start date
             * @example 2024-01-15T00:00:00.000Z
             */
            startDate?: string | null;
            /**
             * Format: date-time
             * @description Role end date
             * @example 2024-12-31T00:00:00.000Z
             */
            endDate?: string | null;
            /** @description Current status of the role */
            status: components["schemas"]["RoleStatus"];
            /**
             * @description Additional notes about the role
             * @example Looking for someone with React and TypeScript experience
             */
            notes?: string | null;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T12:00:00.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-02T14:30:00.000Z
             */
            updatedAt: string;
            /**
             * @description Array of people assigned to this role
             * @example [
             *       {
             *         "id": "456e7890-e89b-12d3-a456-426614174001",
             *         "firstName": "John",
             *         "lastName": "Doe",
             *         "fullName": "John Doe",
             *         "email": "john.doe@company.com",
             *         "assignedAt": "2024-01-15T10:00:00.000Z"
             *       }
             *     ]
             */
            assignedMembers: components["schemas"]["AssignedMember"][];
        };
        AssignedMember: {
            /**
             * Format: uuid
             * @description Unique identifier for the person
             * @example 456e7890-e89b-12d3-a456-426614174001
             */
            id: string;
            /**
             * @description First name of the person
             * @example John
             */
            firstName: string;
            /**
             * @description Last name of the person
             * @example Doe
             */
            lastName: string;
            /**
             * @description Full name of the person
             * @example John Doe
             */
            fullName: string;
            /**
             * Format: email
             * @description Email address of the person
             * @example john.doe@company.com
             */
            email: string;
            /**
             * Format: date-time
             * @description When the person was assigned to this role
             * @example 2024-01-15T10:00:00.000Z
             */
            assignedAt?: string | null;
        };
        CreateRole: {
            /**
             * Format: uuid
             * @description UUID of the associated opportunity (must exist in database)
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            opportunityId: string;
            /**
             * @description Name/title of the role
             * @example Senior Frontend Developer
             */
            roleName: string;
            /**
             * @description Job grade/seniority level: JT=Junior Trainee, T=Trainee, ST=Senior Trainee, EN=Engineer, SE=Senior Engineer, C=Consultant, SC=Senior Consultant, SM=Senior Manager
             * @example SE
             * @enum {string|null}
             */
            jobGrade?: "JT" | "T" | "ST" | "EN" | "SE" | "C" | "SC" | "SM" | null;
            /**
             * @description Opportunity priority/importance level
             * @example High
             * @enum {string|null}
             */
            level?: "Low" | "Medium" | "High" | null;
            /**
             * @description Percentage of time allocated to this role (0-100%)
             * @example 80
             */
            allocation?: number | null;
            /**
             * Format: date
             * @description Role start date (YYYY-MM-DD format)
             * @example 2024-03-15
             */
            startDate?: string | null;
            /**
             * Format: date
             * @description Role end date (YYYY-MM-DD format)
             * @example 2024-09-15
             */
            endDate?: string | null;
            /**
             * @description Current status of the role: Open=needs to be filled, Staffed=assigned to someone, Won=successfully filled and project won, Lost=lost to competition
             * @example Open
             * @enum {string}
             */
            status: "Open" | "Staffed" | "Won" | "Lost";
            /**
             * @description Additional notes, requirements, or comments about the role
             * @example Requires 5+ years React experience and team leadership skills
             */
            notes?: string | null;
        };
        /** @description Schema for updating role information via PATCH request. All fields are optional. */
        UpdateRole: {
            /**
             * @description Name/title of the role
             * @example Senior Frontend Developer
             */
            roleName?: string;
            /**
             * @description Job grade/seniority level: JT=Junior Trainee, T=Trainee, ST=Senior Trainee, EN=Engineer, SE=Senior Engineer, C=Consultant, SC=Senior Consultant, SM=Senior Manager
             * @example SE
             * @enum {string|null}
             */
            jobGrade?: "JT" | "T" | "ST" | "EN" | "SE" | "C" | "SC" | "SM" | null;
            /**
             * @description Opportunity priority/importance level
             * @example High
             * @enum {string|null}
             */
            level?: "Low" | "Medium" | "High" | null;
            /**
             * @description Percentage of time allocated to this role (0-100%)
             * @example 80
             */
            allocation?: number | null;
            /**
             * Format: date
             * @description Role start date (YYYY-MM-DD format)
             * @example 2024-03-15
             */
            startDate?: string | null;
            /**
             * Format: date
             * @description Role end date (YYYY-MM-DD format)
             * @example 2024-09-15
             */
            endDate?: string | null;
            /**
             * @description Current status of the role: Open=needs to be filled, Staffed=assigned to someone, Won=successfully filled and project won, Lost=lost to competition
             * @example Open
             * @enum {string}
             */
            status?: "Open" | "Staffed" | "Won" | "Lost";
            /**
             * @description Additional notes, requirements, or comments about the role
             * @example Updated requirements - now requires team leadership experience
             */
            notes?: string | null;
        };
        PaginationMeta: {
            /**
             * @description Current page number
             * @example 1
             */
            page: number;
            /**
             * @description Items per page
             * @example 10
             */
            limit: number;
            /**
             * @description Total number of items
             * @example 25
             */
            total: number;
            /**
             * @description Total number of pages
             * @example 3
             */
            totalPages: number;
            /**
             * @description Whether there is a next page
             * @example true
             */
            hasNextPage: boolean;
            /**
             * @description Whether there is a previous page
             * @example false
             */
            hasPreviousPage: boolean;
            /**
             * @description Next page number (null if no next page)
             * @example 2
             */
            nextPage: number | null;
            /**
             * @description Previous page number (null if no previous page)
             * @example null
             */
            previousPage: number | null;
        };
        FilterParams: {
            /**
             * @description Filter by client name (partial match)
             * @example Herzog
             */
            client?: string;
            /**
             * @description Probability range filter [min, max]
             * @example [
             *       80,
             *       100
             *     ]
             */
            probability?: number[];
            /**
             * @description Filter by status
             * @example Done
             * @enum {string}
             */
            status?: "In Progress" | "On Hold" | "Done";
            /**
             * @description Filter by active status
             * @example true
             */
            isActive?: boolean;
            /**
             * Format: date
             * @description Filter by start date (from)
             * @example 2025-01-01
             */
            startDate?: string;
            /**
             * Format: date
             * @description Filter by end date (to)
             * @example 2025-12-31
             */
            endDate?: string;
        };
        SearchParams: {
            /**
             * @description Search term
             * @example Platform
             */
            search?: string;
            /**
             * @description Fields to search in
             * @example [
             *       "opportunityName",
             *       "clientName"
             *     ]
             */
            searchFields?: ("opportunityName" | "clientName" | "comment")[];
        };
        EmployeeFilterParams: {
            /**
             * @description Filter by position (partial match)
             * @example Engineer
             */
            position?: string;
            /**
             * @description Filter by employee status
             * @example Active
             * @enum {string}
             */
            employeeStatus?: "Active" | "On Leave" | "Inactive";
            /**
             * @description Filter by work status
             * @example On Project
             * @enum {string}
             */
            workStatus?: "On Project" | "On Bench" | "Available";
            /**
             * @description Filter by job grade
             * @example SE
             * @enum {string}
             */
            jobGrade?: "JT" | "T" | "ST" | "EN" | "SE" | "C" | "SC" | "SM";
            /**
             * @description Filter by location (partial match)
             * @example New York
             */
            location?: string;
            /**
             * @description Filter by active status
             * @example true
             */
            isActive?: boolean;
            dateRange?: {
                /**
                 * Format: date
                 * @description Filter by hire date (from)
                 * @example 2024-01-01
                 */
                start?: string;
                /**
                 * Format: date
                 * @description Filter by hire date (to)
                 * @example 2024-12-31
                 */
                end?: string;
            };
        };
        EmployeeSearchParams: {
            /**
             * @description Search term
             * @example John
             */
            search?: string;
            /**
             * @description Fields to search in
             * @example [
             *       "firstName",
             *       "lastName",
             *       "email"
             *     ]
             */
            searchFields?: ("firstName" | "lastName" | "fullName" | "email" | "position" | "location")[];
        };
        SortParams: {
            /**
             * @description Field to sort by
             * @example probability
             * @enum {string}
             */
            sortBy?: "opportunityName" | "clientName" | "probability" | "createdAt" | "updatedAt" | "status";
            /**
             * @description Sort order
             * @example desc
             * @enum {string}
             */
            sortOrder?: "asc" | "desc";
        };
        EmployeeSortParams: {
            /**
             * @description Field to sort by
             * @example lastName
             * @enum {string}
             */
            sortBy?: "firstName" | "lastName" | "fullName" | "email" | "position" | "hireDate" | "employeeStatus" | "workStatus" | "jobGrade" | "location";
            /**
             * @description Sort order
             * @example asc
             * @enum {string}
             */
            sortOrder?: "asc" | "desc";
        };
        /**
         * @deprecated
         * @description DEPRECATED: This schema is deprecated. Use the flatter response structure instead.
         */
        PaginatedResponse: {
            /** @description Array of opportunities */
            data: components["schemas"]["Opportunity"][];
            pagination: components["schemas"]["PaginationMeta"];
            /** @description Applied filters (if any) */
            filters?: components["schemas"]["FilterParams"];
            /** @description Search parameters (if any) */
            search?: components["schemas"]["SearchParams"];
            /** @description Sort parameters (if any) */
            sort?: components["schemas"]["SortParams"];
        };
        /**
         * @deprecated
         * @description DEPRECATED: This schema is deprecated. Use the flatter response structure instead.
         */
        EmployeePaginatedResponse: {
            /** @description Array of employees */
            data: components["schemas"]["Employee"][];
            pagination: components["schemas"]["PaginationMeta"];
            /** @description Applied filters (if any) */
            filters?: components["schemas"]["EmployeeFilterParams"];
            /** @description Search parameters (if any) */
            search?: components["schemas"]["EmployeeSearchParams"];
            /** @description Sort parameters (if any) */
            sort?: components["schemas"]["EmployeeSortParams"];
        };
        EnhancedMeta: {
            /**
             * @description Number of items in current page
             * @example 5
             */
            count: number;
            /**
             * @description Total items after filtering
             * @example 15
             */
            filtered?: number;
            /**
             * @description Total items in database
             * @example 25
             */
            total?: number;
            /**
             * Format: date-time
             * @description Response timestamp
             * @example 2025-06-19T11:47:43.584Z
             */
            timestamp: string;
            /**
             * @description API endpoint that was called
             * @example /api/v1/opportunities
             */
            endpoint?: string;
        };
        ApiResponse: {
            /**
             * @description Response status
             * @example success
             * @enum {string}
             */
            status: "success" | "error";
            /** @description Response data (varies by endpoint) */
            data: components["schemas"]["Opportunity"] | components["schemas"]["Opportunity"][] | components["schemas"]["PaginatedResponse"];
            /** @description Response metadata */
            meta: components["schemas"]["EnhancedMeta"] | {
                /** Format: date-time */
                timestamp?: string;
            };
        };
        ErrorResponse: {
            /**
             * @example error
             * @enum {string}
             */
            status: "error";
            /**
             * @description Error message
             * @example Opportunity not found
             */
            message: string;
            meta: {
                /**
                 * Format: date-time
                 * @example 2024-01-16T15:30:00Z
                 */
                timestamp?: string;
                /** @example /api/v1/opportunities/invalid-id */
                endpoint?: string;
            };
        };
        CreateEmployee: {
            /**
             * @description First name of the employee
             * @example Jane
             */
            firstName: string;
            /**
             * @description Last name of the employee
             * @example Smith
             */
            lastName: string;
            /**
             * Format: email
             * @description Email address of the employee
             * @example jane.smith@company.com
             */
            email: string;
            /**
             * @description Phone number of the employee
             * @example +1-555-0123
             */
            phone?: string;
            /**
             * Format: date
             * @description Birth date of the employee
             * @example 1990-05-15
             */
            birthDate?: string;
            /**
             * @description Address of the employee
             * @example 123 Main St, Anytown, USA
             */
            address?: string;
            /**
             * @description City where the employee lives
             * @example San Francisco
             */
            city?: string;
            /**
             * @description Country where the employee lives
             * @example USA
             */
            country?: string;
            /**
             * @description Personal notes about the employee
             * @example Excellent team player
             */
            personNotes?: string;
            /**
             * Format: date
             * @description Date when the employee was hired
             * @example 2024-01-15
             */
            hireDate: string;
            /**
             * @description Job position/title
             * @example Product Manager
             */
            position: string;
            /**
             * @description Type of employment
             * @example Full-time
             */
            employmentType?: string;
            /**
             * @description Annual salary
             * @example 95000
             */
            salary?: number;
            /**
             * @description Hourly rate (for hourly employees)
             * @example 45.5
             */
            hourlyRate?: number;
            /**
             * Format: uuid
             * @description Manager's person ID
             * @example 789e0123-e89b-12d3-a456-426614174002
             */
            managerId?: string;
            /**
             * @description Current employment status
             * @default Active
             * @example Active
             * @enum {string}
             */
            employeeStatus: "Active" | "On Leave" | "Inactive";
            /**
             * @description Current work assignment status
             * @default Available
             * @example Available
             * @enum {string}
             */
            workStatus: "On Project" | "On Bench" | "Available";
            /**
             * @description Job grade level
             * @example SE
             * @enum {string}
             */
            jobGrade?: "JT" | "T" | "ST" | "EN" | "SE" | "C" | "SC" | "SM";
            /**
             * @description Work location
             * @example San Francisco
             */
            location?: string;
            /**
             * @description Emergency contact name
             * @example John Smith
             */
            emergencyContactName?: string;
            /**
             * @description Emergency contact phone
             * @example +1-555-0456
             */
            emergencyContactPhone?: string;
            /**
             * @description Employment-related notes
             * @example Starting as Product Manager
             */
            employmentNotes?: string;
        };
        /** @description Schema for PATCH operations. All fields are optional - only send the fields you want to update. */
        UpdateEmployee: {
            /**
             * @description First name of the employee
             * @example Jane
             */
            firstName?: string;
            /**
             * @description Last name of the employee
             * @example Smith
             */
            lastName?: string;
            /**
             * Format: email
             * @description Email address of the employee
             * @example jane.smith@company.com
             */
            email?: string;
            /**
             * @description Phone number of the employee
             * @example +1-555-0123
             */
            phone?: string;
            /**
             * Format: date
             * @description Birth date of the employee
             * @example 1990-05-15
             */
            birthDate?: string;
            /**
             * @description Address of the employee
             * @example 123 Main St, Anytown, USA
             */
            address?: string;
            /**
             * @description City where the employee lives
             * @example San Francisco
             */
            city?: string;
            /**
             * @description Country where the employee lives
             * @example USA
             */
            country?: string;
            /**
             * @description Personal notes about the employee
             * @example Excellent team player
             */
            personNotes?: string;
            /**
             * Format: date
             * @description Date when the employee was hired
             * @example 2024-01-15
             */
            hireDate?: string;
            /**
             * Format: date
             * @description Date when employment was terminated
             * @example 2024-12-31
             */
            terminationDate?: string;
            /**
             * @description Job position/title
             * @example Senior Product Manager
             */
            position?: string;
            /**
             * @description Type of employment
             * @example Full-time
             */
            employmentType?: string;
            /**
             * @description Annual salary
             * @example 105000
             */
            salary?: number;
            /**
             * @description Hourly rate (for hourly employees)
             * @example 50
             */
            hourlyRate?: number;
            /**
             * Format: uuid
             * @description Manager's person ID
             * @example 789e0123-e89b-12d3-a456-426614174002
             */
            managerId?: string;
            /**
             * @description Current employment status
             * @example Active
             * @enum {string}
             */
            employeeStatus?: "Active" | "On Leave" | "Inactive";
            /**
             * @description Current work assignment status
             * @example On Project
             * @enum {string}
             */
            workStatus?: "On Project" | "On Bench" | "Available";
            /**
             * @description Job grade level
             * @example SE
             * @enum {string}
             */
            jobGrade?: "JT" | "T" | "ST" | "EN" | "SE" | "C" | "SC" | "SM";
            /**
             * @description Work location
             * @example Remote
             */
            location?: string;
            /**
             * @description Emergency contact name
             * @example John Smith
             */
            emergencyContactName?: string;
            /**
             * @description Emergency contact phone
             * @example +1-555-0456
             */
            emergencyContactPhone?: string;
            /**
             * @description Employment-related notes
             * @example Promoted to senior level
             */
            employmentNotes?: string;
        };
        /** @description Schema for updating personal information. All fields are optional. */
        UpdatePersonData: {
            /**
             * @description First name of the employee
             * @example Jane
             */
            firstName?: string;
            /**
             * @description Last name of the employee
             * @example Smith
             */
            lastName?: string;
            /**
             * @description Full name of the employee
             * @example Jane Smith
             */
            fullName?: string;
            /**
             * Format: email
             * @description Email address of the employee
             * @example jane.smith@company.com
             */
            email?: string;
            /**
             * @description Phone number of the employee
             * @example +1-555-0123
             */
            phone?: string;
            /**
             * Format: date
             * @description Birth date of the employee
             * @example 1990-05-15
             */
            birthDate?: string;
            /**
             * @description Address of the employee
             * @example 123 Main St, Anytown, USA
             */
            address?: string;
            /**
             * @description City where the employee lives
             * @example San Francisco
             */
            city?: string;
            /**
             * @description Country where the employee lives
             * @example USA
             */
            country?: string;
            /**
             * @description Personal notes about the employee
             * @example Excellent team player
             */
            notes?: string;
        };
        /** @description Schema for updating employment information. All fields are optional. */
        UpdateEmploymentData: {
            /**
             * @description Job position/title
             * @example Senior Software Engineer
             */
            position?: string;
            /**
             * Format: date
             * @description Date when the employee was hired
             * @example 2024-01-15
             */
            hireDate?: string;
            /**
             * Format: date
             * @description Date when employment was terminated
             * @example 2024-12-31
             */
            terminationDate?: string;
            /**
             * @description Type of employment
             * @example Full-time
             */
            employmentType?: string;
            /**
             * @description Annual salary
             * @example 110000
             */
            salary?: number;
            /**
             * @description Hourly rate (for hourly employees)
             * @example 50
             */
            hourlyRate?: number;
            /**
             * Format: uuid
             * @description Manager's person ID
             * @example 789e0123-e89b-12d3-a456-426614174002
             */
            managerId?: string;
            /**
             * @description Current employment status
             * @example Active
             * @enum {string}
             */
            employeeStatus?: "Active" | "On Leave" | "Inactive";
            /**
             * @description Current work assignment status
             * @example On Project
             * @enum {string}
             */
            workStatus?: "On Project" | "On Bench" | "Available";
            /**
             * @description Job grade level
             * @example SE
             * @enum {string}
             */
            jobGrade?: "JT" | "T" | "ST" | "EN" | "SE" | "C" | "SC" | "SM";
            /**
             * @description Work location
             * @example Remote
             */
            location?: string;
            /**
             * @description Emergency contact name
             * @example John Smith
             */
            emergencyContactName?: string;
            /**
             * @description Emergency contact phone
             * @example +1-555-0456
             */
            emergencyContactPhone?: string;
            /**
             * @description Employment-related notes
             * @example Promoted to senior level
             */
            notes?: string;
        };
        CreateEmployeeSkill: {
            /**
             * @description Name of the skill to add to the employee. If the skill doesn't exist in the database, it will be automatically created. Examples: JavaScript, Python, React, Node.js, Communication, Leadership, Problem Solving, etc.
             * @example JavaScript
             */
            skillName: string;
            /**
             * @description Level of proficiency with this skill
             * @example ADVANCED
             */
            proficiencyLevel?: string;
            /**
             * @description Years of experience with this skill
             * @example 5
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description Date when the skill was last used
             * @example 2024-01-15T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Whether the employee is certified in this skill
             * @example true
             */
            isCertified?: boolean;
            /**
             * @description Name of the certification
             * @example JavaScript Professional Certificate
             */
            certificationName?: string;
            /**
             * Format: date-time
             * @description Date when the certification was obtained
             * @example 2023-06-15T00:00:00Z
             */
            certificationDate?: string;
            /**
             * @description Additional notes about this skill
             * @example Extensive experience with React and Node.js
             */
            notes?: string;
        };
        /** @description Schema for updating employee skills. All fields are optional. */
        UpdateEmployeeSkill: {
            /**
             * @description Level of proficiency with this skill
             * @example EXPERT
             */
            proficiencyLevel?: string;
            /**
             * @description Years of experience with this skill
             * @example 7
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description Date when the skill was last used
             * @example 2024-01-15T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Whether the employee is certified in this skill
             * @example true
             */
            isCertified?: boolean;
            /**
             * @description Name of the certification
             * @example Advanced JavaScript Certification
             */
            certificationName?: string;
            /**
             * Format: date-time
             * @description Date when the certification was obtained
             * @example 2024-01-01T00:00:00Z
             */
            certificationDate?: string;
            /**
             * @description Additional notes about this skill
             * @example Updated to expert level after recent certification
             */
            notes?: string;
        };
        CreateEmployeeTechnology: {
            /**
             * @description Name of the technology to add to the employee. If the technology doesn't exist in the database, it will be automatically created. Examples: React, JavaScript, Python, Java, C#, Node.js, PostgreSQL, MySQL, Docker, Kubernetes, Vue.js, Angular, TypeScript, etc.
             * @example React
             */
            technologyName: string;
            /**
             * @description Level of proficiency with this technology
             * @example ADVANCED
             */
            proficiencyLevel?: string;
            /**
             * @description Years of experience with this technology
             * @example 4
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description Date when the technology was last used
             * @example 2024-01-10T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Context in which the technology is used
             * @example Frontend Development
             */
            context?: string;
            /**
             * @description Name of the project where technology was used
             * @example E-commerce Platform
             */
            projectName?: string;
            /**
             * @description Description of how the technology was used
             * @example Built scalable React components for user interfaces
             */
            description?: string;
        };
        /** @description Schema for updating employee technologies. All fields are optional. */
        UpdateEmployeeTechnology: {
            /**
             * @description Level of proficiency with this technology
             * @example EXPERT
             */
            proficiencyLevel?: string;
            /**
             * @description Years of experience with this technology
             * @example 6
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description Date when the technology was last used
             * @example 2024-01-15T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Context in which the technology is used
             * @example Full-stack Development
             */
            context?: string;
            /**
             * @description Name of the project where technology was used
             * @example Microservices Platform
             */
            projectName?: string;
            /**
             * @description Description of how the technology was used
             * @example Leading React development across multiple projects
             */
            description?: string;
        };
        CreateEmployeeEducation: {
            /**
             * @description Name of the educational institution. You can use any institution name (e.g., Stanford University, MIT, Harvard, local colleges, online platforms like Coursera, etc.)
             * @example Stanford University
             */
            institution: string;
            /**
             * @description Type of degree obtained
             * @example Bachelor of Science
             */
            degree?: string;
            /**
             * @description Field of study or major
             * @example Computer Science
             */
            fieldOfStudy?: string;
            /**
             * Format: date-time
             * @description Start date of the education
             * @example 2018-09-01T00:00:00Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Graduation date
             * @example 2022-06-15T00:00:00Z
             */
            graduationDate?: string;
            /**
             * @description Description of the education
             * @example Focused on software engineering and algorithms
             */
            description?: string;
            /**
             * @description Grade Point Average
             * @example 3.8
             */
            gpa?: string;
            /**
             * @description Whether currently enrolled
             * @example false
             */
            isCurrentlyEnrolled?: string;
        };
        /** @description Schema for updating employee education. All fields are optional. */
        UpdateEmployeeEducation: {
            /**
             * @description Name of the educational institution. You can use any institution name (e.g., Stanford University, MIT, Harvard, local colleges, online platforms like Coursera, etc.)
             * @example Stanford University
             */
            institution?: string;
            /**
             * @description Type of degree obtained
             * @example Bachelor of Science
             */
            degree?: string;
            /**
             * @description Field of study or major
             * @example Computer Science
             */
            fieldOfStudy?: string;
            /**
             * Format: date-time
             * @description Start date of the education
             * @example 2018-09-01T00:00:00Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Graduation date
             * @example 2022-06-15T00:00:00Z
             */
            graduationDate?: string;
            /**
             * @description Description of the education
             * @example Graduated summa cum laude with honors in Computer Science
             */
            description?: string;
            /**
             * @description Grade Point Average
             * @example 3.9
             */
            gpa?: string;
            /**
             * @description Whether currently enrolled
             * @example false
             */
            isCurrentlyEnrolled?: string;
        };
        EmployeeSkill: {
            /**
             * Format: uuid
             * @description ID of the skill
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            skillId?: string;
            /**
             * @description Name of the skill
             * @example JavaScript
             */
            skillName?: string;
            /**
             * @description Category of the skill
             * @example Programming Language
             */
            skillCategory?: string;
            /**
             * @description Description of the skill
             * @example High-level programming language
             */
            skillDescription?: string;
            /**
             * @description Employee's proficiency level
             * @example ADVANCED
             */
            proficiencyLevel?: string;
            /**
             * @description Years of experience
             * @example 5
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description Last used date
             * @example 2024-01-15T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Certification status
             * @example true
             */
            isCertified?: boolean;
            /**
             * @description Certification name
             * @example JavaScript Professional Certificate
             */
            certificationName?: string;
            /**
             * Format: date-time
             * @description Certification date
             * @example 2023-06-15T00:00:00Z
             */
            certificationDate?: string;
            /**
             * @description Additional notes
             * @example Extensive experience with React and Node.js
             */
            notes?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-15T00:00:00Z
             */
            updatedAt?: string;
        };
        EmployeeTechnology: {
            /**
             * Format: uuid
             * @description ID of the technology
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            technologyId?: string;
            /**
             * @description Name of the technology
             * @example React
             */
            technologyName?: string;
            /**
             * @description Category of the technology
             * @example Frontend Framework
             */
            technologyCategory?: string;
            /**
             * @description Description of the technology
             * @example JavaScript library for building user interfaces
             */
            technologyDescription?: string;
            /**
             * @description Employee's proficiency level
             * @example ADVANCED
             */
            proficiencyLevel?: string;
            /**
             * @description Years of experience
             * @example 4
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description Last used date
             * @example 2024-01-10T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Usage context
             * @example Frontend Development
             */
            context?: string;
            /**
             * @description Project name
             * @example E-commerce Platform
             */
            projectName?: string;
            /**
             * @description Usage description
             * @example Built scalable React components for user interfaces
             */
            description?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-10T00:00:00Z
             */
            updatedAt?: string;
        };
        EmployeeEducation: {
            /**
             * Format: uuid
             * @description ID of the education record
             * @example 550e8400-e29b-41d4-a716-446655440002
             */
            educationId?: string;
            /**
             * @description Educational institution
             * @example Stanford University
             */
            institution?: string;
            /**
             * @description Degree type
             * @example Bachelor of Science
             */
            degree?: string;
            /**
             * @description Field of study
             * @example Computer Science
             */
            fieldOfStudy?: string;
            /**
             * Format: date-time
             * @description Start date
             * @example 2018-09-01T00:00:00Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Graduation date
             * @example 2022-06-15T00:00:00Z
             */
            graduationDate?: string;
            /**
             * @description Education description
             * @example Focused on software engineering and algorithms
             */
            description?: string;
            /**
             * @description Grade Point Average
             * @example 3.8
             */
            gpa?: string;
            /**
             * @description Current enrollment status
             * @example false
             */
            isCurrentlyEnrolled?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-01T00:00:00Z
             */
            updatedAt?: string;
        };
        Skill: {
            /**
             * Format: uuid
             * @description Unique identifier for the skill
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id?: string;
            /**
             * @description Name of the skill
             * @example JavaScript
             */
            name?: string;
            /**
             * @description Category of the skill
             * @example Programming Language
             */
            category?: string;
            /**
             * @description Description of the skill
             * @example High-level programming language for web development
             */
            description?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-01T00:00:00Z
             */
            updatedAt?: string;
        };
        Technology: {
            /**
             * Format: uuid
             * @description Unique identifier for the technology
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            id?: string;
            /**
             * @description Name of the technology
             * @example React
             */
            name?: string;
            /**
             * @description Category of the technology
             * @example Frontend Framework
             */
            category?: string;
            /**
             * @description Description of the technology
             * @example JavaScript library for building user interfaces
             */
            description?: string;
            /**
             * @description Version of the technology
             * @example 18.0
             */
            version?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-01T00:00:00Z
             */
            updatedAt?: string;
        };
        SkillsResponse: {
            /**
             * @example success
             * @enum {string}
             */
            status?: "success";
            data?: components["schemas"]["Skill"][];
            pagination?: {
                /**
                 * @description Total number of skills
                 * @example 55
                 */
                total?: number;
                /**
                 * @description Number of items per page
                 * @example 50
                 */
                limit?: number;
                /**
                 * @description Number of items skipped
                 * @example 0
                 */
                offset?: number;
                /**
                 * @description Whether there are more items
                 * @example false
                 */
                hasMore?: boolean;
            };
        };
        TechnologiesResponse: {
            /**
             * @example success
             * @enum {string}
             */
            status?: "success";
            data?: components["schemas"]["Technology"][];
            pagination?: {
                /**
                 * @description Total number of technologies
                 * @example 42
                 */
                total?: number;
                /**
                 * @description Number of items per page
                 * @example 50
                 */
                limit?: number;
                /**
                 * @description Number of items skipped
                 * @example 0
                 */
                offset?: number;
                /**
                 * @description Whether there are more items
                 * @example false
                 */
                hasMore?: boolean;
            };
        };
        CategoriesResponse: {
            /**
             * @example success
             * @enum {string}
             */
            status?: "success";
            /**
             * @description List of categories
             * @example [
             *       "Programming Language",
             *       "Frontend Framework",
             *       "Database",
             *       "Cloud Platform"
             *     ]
             */
            data?: string[];
        };
        Person: {
            /**
             * Format: uuid
             * @description Unique identifier for the person
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description First name of the person
             * @example John
             */
            firstName: string;
            /**
             * @description Last name of the person
             * @example Doe
             */
            lastName: string;
            /**
             * @description Full name of the person
             * @example John Doe
             */
            fullName: string;
            /**
             * Format: email
             * @description Email address of the person
             * @example john.doe@example.com
             */
            email: string;
            /**
             * @description Phone number of the person
             * @example +1-555-0123
             */
            phone?: string | null;
            /**
             * Format: date-time
             * @description Birth date of the person
             * @example 1990-05-15T00:00:00Z
             */
            birthDate?: string | null;
            /**
             * @description Address of the person
             * @example 123 Main St, Anytown, USA
             */
            address?: string | null;
            /**
             * @description City where the person lives
             * @example New York
             */
            city?: string | null;
            /**
             * @description Country where the person lives
             * @example USA
             */
            country?: string | null;
            /**
             * @description Notes about the person
             * @example Software engineer with expertise in full-stack development
             */
            notes?: string | null;
            /**
             * Format: date-time
             * @description When the person record was created
             * @example 2024-01-10T09:00:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the person record was last updated
             * @example 2024-01-15T14:30:00Z
             */
            updatedAt: string;
        };
        CreatePerson: {
            /**
             * @description First name of the person
             * @example Jane
             */
            firstName: string;
            /**
             * @description Last name of the person
             * @example Smith
             */
            lastName: string;
            /**
             * @description Full name (auto-generated if not provided)
             * @example Jane Smith
             */
            fullName?: string;
            /**
             * Format: email
             * @description Email address of the person
             * @example jane.smith@example.com
             */
            email: string;
            /**
             * @description Phone number of the person
             * @example +1-555-0123
             */
            phone?: string;
            /**
             * Format: date
             * @description Birth date of the person
             * @example 1990-05-15
             */
            birthDate?: string;
            /**
             * @description Address of the person
             * @example 123 Main St, Anytown, USA
             */
            address?: string;
            /**
             * @description City where the person lives
             * @example San Francisco
             */
            city?: string;
            /**
             * @description Country where the person lives
             * @example USA
             */
            country?: string;
            /**
             * @description Notes about the person
             * @example Software engineer with expertise in full-stack development
             */
            notes?: string;
        };
        /** @description Schema for PATCH operations. All fields are optional. */
        UpdatePerson: {
            /**
             * @description First name of the person
             * @example Jane
             */
            firstName?: string;
            /**
             * @description Last name of the person
             * @example Smith
             */
            lastName?: string;
            /**
             * @description Full name of the person
             * @example Jane Smith
             */
            fullName?: string;
            /**
             * Format: email
             * @description Email address of the person
             * @example jane.smith@example.com
             */
            email?: string;
            /**
             * @description Phone number of the person
             * @example +1-555-0123
             */
            phone?: string;
            /**
             * Format: date
             * @description Birth date of the person
             * @example 1990-05-15
             */
            birthDate?: string;
            /**
             * @description Address of the person
             * @example 123 Main St, Anytown, USA
             */
            address?: string;
            /**
             * @description City where the person lives
             * @example San Francisco
             */
            city?: string;
            /**
             * @description Country where the person lives
             * @example USA
             */
            country?: string;
            /**
             * @description Notes about the person
             * @example Software engineer with expertise in full-stack development
             */
            notes?: string;
        };
        CreatePersonSkill: {
            /**
             * @description Name of the skill (will be auto-created if not exists)
             * @example JavaScript
             */
            skillName: string;
            /**
             * @description Proficiency level in the skill
             * @example ADVANCED
             * @enum {string}
             */
            proficiencyLevel?: "BEGINNER" | "INTERMEDIATE" | "ADVANCED" | "EXPERT";
            /**
             * @description Years of experience with this skill
             * @example 5
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description When the skill was last used
             * @example 2024-01-15T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Whether the person is certified in this skill
             * @example true
             */
            isCertified?: boolean;
            /**
             * @description Name of the certification
             * @example JavaScript Professional Certificate
             */
            certificationName?: string;
            /**
             * Format: date-time
             * @description Date when certification was obtained
             * @example 2023-06-15T00:00:00Z
             */
            certificationDate?: string;
            /**
             * @description Additional notes about this skill
             * @example Extensive experience with React and Node.js
             */
            notes?: string;
        };
        /** @description Schema for updating person skills. All fields are optional. */
        UpdatePersonSkill: {
            /**
             * @description Name of the skill
             * @example JavaScript
             */
            skillName?: string;
            /**
             * @description Proficiency level in the skill
             * @example EXPERT
             * @enum {string}
             */
            proficiencyLevel?: "BEGINNER" | "INTERMEDIATE" | "ADVANCED" | "EXPERT";
            /**
             * @description Years of experience with this skill
             * @example 6
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description When the skill was last used
             * @example 2024-01-15T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Whether the person is certified in this skill
             * @example true
             */
            isCertified?: boolean;
            /**
             * @description Name of the certification
             * @example JavaScript Professional Certificate
             */
            certificationName?: string;
            /**
             * Format: date-time
             * @description Date when certification was obtained
             * @example 2023-06-15T00:00:00Z
             */
            certificationDate?: string;
            /**
             * @description Additional notes about this skill
             * @example Extensive experience with React and Node.js
             */
            notes?: string;
        };
        CreatePersonTechnology: {
            /**
             * @description Name of the technology (will be auto-created if not exists)
             * @example React
             */
            technologyName: string;
            /**
             * @description Proficiency level in the technology
             * @example Advanced
             */
            proficiencyLevel?: string;
            /**
             * @description Years of experience with this technology
             * @example 4
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description When the technology was last used
             * @example 2024-01-15T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Context in which the technology was used
             * @example Frontend Development
             */
            context?: string;
            /**
             * @description Name of project where technology was used
             * @example E-commerce Platform
             */
            projectName?: string;
            /**
             * @description Description of technology usage
             * @example Built responsive user interfaces using React hooks and Redux
             */
            description?: string;
        };
        /** @description Schema for updating person technologies. All fields are optional. */
        UpdatePersonTechnology: {
            /**
             * @description Name of the technology
             * @example React
             */
            technologyName?: string;
            /**
             * @description Proficiency level in the technology
             * @example Expert
             */
            proficiencyLevel?: string;
            /**
             * @description Years of experience with this technology
             * @example 5
             */
            yearsOfExperience?: string;
            /**
             * Format: date-time
             * @description When the technology was last used
             * @example 2024-01-15T00:00:00Z
             */
            lastUsed?: string;
            /**
             * @description Context in which the technology was used
             * @example Full-stack Development
             */
            context?: string;
            /**
             * @description Name of project where technology was used
             * @example Enterprise CRM System
             */
            projectName?: string;
            /**
             * @description Description of technology usage
             * @example Led development of complex React applications with TypeScript
             */
            description?: string;
        };
        CreatePersonEducation: {
            /**
             * @description Name of the educational institution
             * @example Stanford University
             */
            institution: string;
            /**
             * @description Type of degree obtained
             * @example Bachelor of Science
             */
            degree?: string;
            /**
             * @description Field of study or major
             * @example Computer Science
             */
            fieldOfStudy?: string;
            /**
             * Format: date-time
             * @description Start date of the education
             * @example 2018-09-01T00:00:00Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Graduation date
             * @example 2022-06-15T00:00:00Z
             */
            graduationDate?: string;
            /**
             * @description Description of the education
             * @example Focused on software engineering and algorithms
             */
            description?: string;
            /**
             * @description Grade Point Average
             * @example 3.8
             */
            gpa?: string;
            /**
             * @description Whether currently enrolled
             * @example false
             */
            isCurrentlyEnrolled?: string;
        };
        /** @description Schema for updating person education. All fields are optional. */
        UpdatePersonEducation: {
            /**
             * @description Name of the educational institution
             * @example Stanford University
             */
            institution?: string;
            /**
             * @description Type of degree obtained
             * @example Bachelor of Science
             */
            degree?: string;
            /**
             * @description Field of study or major
             * @example Computer Science
             */
            fieldOfStudy?: string;
            /**
             * Format: date-time
             * @description Start date of the education
             * @example 2018-09-01T00:00:00Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Graduation date
             * @example 2022-06-15T00:00:00Z
             */
            graduationDate?: string;
            /**
             * @description Description of the education
             * @example Graduated summa cum laude with honors in Computer Science
             */
            description?: string;
            /**
             * @description Grade Point Average
             * @example 3.9
             */
            gpa?: string;
            /**
             * @description Whether currently enrolled
             * @example false
             */
            isCurrentlyEnrolled?: string;
        };
        EmployeeProfile: {
            /**
             * Format: uuid
             * @description Unique identifier for the person (used for CRUD operations)
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * Format: uuid
             * @description Unique identifier for the person record
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            personId: string;
            /**
             * @description First name of the employee
             * @example John
             */
            firstName: string;
            /**
             * @description Last name of the employee
             * @example Doe
             */
            lastName: string;
            /**
             * @description Full name of the employee
             * @example John Doe
             */
            fullName: string;
            /**
             * Format: email
             * @description Email address of the employee
             * @example john.doe@company.com
             */
            email: string;
            /**
             * @description Phone number of the employee
             * @example +1-555-0123
             */
            phone?: string | null;
            /**
             * @description Address of the employee
             * @example 123 Main St, Anytown, USA
             */
            address?: string | null;
            /**
             * @description City where the employee lives
             * @example New York
             */
            city?: string | null;
            /**
             * @description Country where the employee lives
             * @example USA
             */
            country?: string | null;
            /**
             * Format: date-time
             * @description Birth date of the employee
             * @example 1990-05-15T00:00:00Z
             */
            birthDate?: string | null;
            /**
             * @description Job position/title
             * @example Senior Software Engineer
             */
            position?: string | null;
            /**
             * @description Current employment status
             * @example Active
             * @enum {string|null}
             */
            employeeStatus?: "Active" | "On Leave" | "Inactive" | null;
            /**
             * @description Current work assignment status
             * @example On Project
             * @enum {string|null}
             */
            workStatus?: "On Project" | "On Bench" | "Available" | null;
            /**
             * @description Job grade level
             * @example SE
             * @enum {string|null}
             */
            jobGrade?: "JT" | "T" | "ST" | "EN" | "SE" | "C" | "SC" | "SM" | null;
            /**
             * @description Work location
             * @example New York Office
             */
            location?: string | null;
            /**
             * Format: date-time
             * @description Date when the employee was hired
             * @example 2024-01-15T00:00:00Z
             */
            hireDate?: string | null;
            /**
             * Format: date-time
             * @description Date when the employee was terminated (if applicable)
             * @example null
             */
            terminationDate?: string | null;
            /**
             * @description Annual salary
             * @example 75000
             */
            salary?: number | null;
            /**
             * @description Hourly rate (for hourly employees)
             * @example 45.5
             */
            hourlyRate?: number | null;
            /**
             * Format: uuid
             * @description Manager's person ID
             * @example 789e0123-e89b-12d3-a456-426614174002
             */
            managerId?: string | null;
            /**
             * @description Years of experience since hire date
             * @example 2
             */
            yearsOfExperience: number;
            /**
             * @description Whether the employee is inactive
             * @example false
             */
            isInactive: boolean;
            /**
             * @description Whether the employee is on bench
             * @example false
             */
            isOnBench: boolean;
            /**
             * @description Whether the employee is active
             * @example true
             */
            isActive: boolean;
            /** @description Employee skills */
            skills?: {
                /**
                 * Format: uuid
                 * @description Skill ID
                 * @example 550e8400-e29b-41d4-a716-446655440000
                 */
                id?: string;
                /**
                 * @description Skill name
                 * @example JavaScript
                 */
                name?: string;
                /**
                 * @description Proficiency level
                 * @example ADVANCED
                 */
                proficiencyLevel?: string;
                /**
                 * @description Years of experience
                 * @example 5
                 */
                yearsOfExperience?: number;
                /**
                 * Format: date-time
                 * @description Last used date
                 * @example 2024-01-15T00:00:00Z
                 */
                lastUsed?: string;
                /**
                 * @description Certification status
                 * @example true
                 */
                isCertified?: boolean;
                /**
                 * @description Certification name
                 * @example JavaScript Professional Certificate
                 */
                certificationName?: string;
                /**
                 * Format: date-time
                 * @description Certification date
                 * @example 2023-06-15T00:00:00Z
                 */
                certificationDate?: string;
                /**
                 * @description Additional notes
                 * @example Extensive experience with React and Node.js
                 */
                notes?: string;
            }[];
            /** @description Employee technologies */
            technologies?: {
                /**
                 * Format: uuid
                 * @description Technology ID
                 * @example 550e8400-e29b-41d4-a716-446655440001
                 */
                id?: string;
                /**
                 * @description Technology name
                 * @example React
                 */
                name?: string;
                /**
                 * @description Proficiency level
                 * @example ADVANCED
                 */
                proficiencyLevel?: string;
                /**
                 * @description Years of experience
                 * @example 4
                 */
                yearsOfExperience?: number;
                /**
                 * Format: date-time
                 * @description Last used date
                 * @example 2024-01-10T00:00:00Z
                 */
                lastUsed?: string;
                /**
                 * @description Usage context
                 * @example Frontend Development
                 */
                context?: string;
                /**
                 * @description Project name
                 * @example E-commerce Platform
                 */
                projectName?: string;
                /**
                 * @description Usage description
                 * @example Built scalable React components for user interfaces
                 */
                description?: string;
            }[];
            /** @description Employee education */
            education?: {
                /**
                 * Format: uuid
                 * @description Education record ID
                 * @example 550e8400-e29b-41d4-a716-446655440002
                 */
                id?: string;
                /**
                 * @description Educational institution
                 * @example Stanford University
                 */
                institution?: string;
                /**
                 * @description Degree type
                 * @example Bachelor of Science
                 */
                degree?: string;
                /**
                 * @description Field of study
                 * @example Computer Science
                 */
                fieldOfStudy?: string;
                /**
                 * Format: date-time
                 * @description Start date
                 * @example 2018-09-01T00:00:00Z
                 */
                startDate?: string;
                /**
                 * Format: date-time
                 * @description Graduation date
                 * @example 2022-06-15T00:00:00Z
                 */
                graduationDate?: string;
                /**
                 * @description Grade Point Average
                 * @example 3.8
                 */
                gpa?: string;
                /**
                 * @description Education description
                 * @example Focused on software engineering and algorithms
                 */
                description?: string;
                /**
                 * @description Current enrollment status
                 * @example false
                 */
                isCurrentlyEnrolled?: boolean;
            }[];
        };
        /**
         * @description Job grade/seniority level: JT=Junior Trainee, T=Trainee, ST=Senior Trainee, EN=Engineer, SE=Senior Engineer, C=Consultant, SC=Senior Consultant, SM=Senior Manager
         * @enum {string}
         */
        JobGrade: "JT" | "T" | "ST" | "EN" | "SE" | "C" | "SC" | "SM";
        /**
         * @description Opportunity priority/importance level
         * @enum {string}
         */
        OpportunityLevel: "Low" | "Medium" | "High";
        /**
         * @description Current status of the role: Open=needs to be filled, Staffed=assigned to someone, Won=successfully filled and project won, Lost=lost to competition
         * @enum {string}
         */
        RoleStatus: "Open" | "Staffed" | "Won" | "Lost";
    };
    responses: {
        /** @description The specified resource was not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * @example error
                     * @enum {string}
                     */
                    status: "error";
                    data: {
                        /** @example Resource not found */
                        message: string;
                        /** @example NOT_FOUND */
                        code: string;
                    };
                };
            };
        };
        /** @description The request was invalid */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Authentication is required */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Permission denied */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * @example error
                     * @enum {string}
                     */
                    status: "error";
                    data: {
                        /** @example Internal server error */
                        message: string;
                        /** @example INTERNAL_ERROR */
                        code: string;
                    };
                };
            };
        };
        /** @description Validation error */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * @example error
                     * @enum {string}
                     */
                    status: "error";
                    data: {
                        /** @example Invalid request body */
                        message: string;
                        /** @example VALIDATION_ERROR */
                        code: string;
                        /**
                         * @description Detailed validation errors
                         * @example {
                         *       "firstName": {
                         *         "_errors": [
                         *           "String must contain at least 1 character(s)"
                         *         ]
                         *       },
                         *       "email": {
                         *         "_errors": [
                         *           "Invalid email"
                         *         ]
                         *       }
                         *     }
                         */
                        details?: Record<string, never>;
                    };
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
